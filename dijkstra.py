'''
Created on Apr 2, 2018

@author: dexca
'''
import numpy as np
from collections import deque

direction = {0: "left", 1: "up", 2: "right", 3: "down"}

typeMaze = np.array([(    [1,0],     [0,1],        [0,1],        [0,1],        [0,1],        [0,1],        [0,1],        [1,1],        [0,1],        [0,1],        [0,1],        [0,1],        [1,1],        [0,1],        [0,1],        [1,0]        ),
(    [1,0],        [1,1],        [0,1],        [0,1],        [0,1],        [0,1],        [1,0],        [1,0],        [0,1],        [1,1],        [0,1],        [0,0],        [0,0],        [1,1],        [0,0],        [1,0]        ),
(    [1,0],        [1,0],        [1,0],        [0,1],        [0,1],        [1,0],        [1,0],        [0,1],        [0,1],        [1,0],        [1,1],        [0,1],        [0,1],        [0,1],        [1,1],        [1,0]        ),
(    [1,0],        [1,0],        [0,1],        [1,1],        [0,0],        [1,0],        [1,1],        [0,1],        [1,0],        [0,0],        [1,0],        [1,1],        [0,1],        [1,0],        [1,0],        [1,0]        ),
(    [1,0],        [0,1],        [1,0],        [1,0],        [1,1],        [0,0],        [1,0],        [1,1],        [0,1],        [0,1],        [0,0],        [1,0],        [1,0],        [1,0],        [1,0],        [1,0]        ),
(    [1,0],        [0,1],        [1,0],        [1,1],        [0,0],        [1,1],        [0,0],        [1,0],        [1,1],        [0,1],        [0,1],        [1,0],        [1,0],        [0,0],        [0,0],        [1,0]        ),
(    [1,1],        [0,0],        [1,0],        [1,0],        [1,1],        [0,1],        [1,0],        [1,0],        [1,0],        [1,0],        [1,0],        [1,0],        [0,1],        [1,1],        [0,1],        [1,0]        ),
(    [1,0],        [0,1],        [0,0],        [1,0],        [1,0],        [1,0],        [0,0],        [1,0],        [0,0],        [1,0],        [1,0],        [1,0],        [1,0],        [1,0],        [1,0],        [1,0]        ),
(    [1,1],        [0,1],        [1,0],        [1,0],        [1,0],        [0,1],        [0,1],        [0,1],        [1,1],        [0,0],        [1,0],        [1,0],        [1,0],        [1,0],        [1,1],        [1,0]        ),
(    [1,0],        [1,0],        [0,0],        [1,0],        [0,1],        [0,1],        [1,0],        [1,1],        [0,0],        [1,1],        [0,0],        [1,0],        [1,0],        [1,0],        [1,0],        [1,0]        ),
(    [1,0],        [1,1],        [1,1],        [0,1],        [0,1],        [0,0],        [1,0],        [1,0],        [1,1],        [0,0],        [1,1],        [0,0],        [1,0],        [1,0],        [1,0],        [1,0]        ),
(    [1,0],        [0,0],        [1,0],        [1,1],        [0,1],        [0,1],        [0,0],        [1,0],        [1,0],        [0,1],        [1,0],        [1,1],        [1,0],        [1,0],        [1,0],        [1,0]        ),
(    [1,1],        [0,1],        [0,0],        [1,0],        [0,1],        [0,1],        [1,1],        [0,0],        [1,1],        [0,0],        [1,0],        [1,0],        [0,0],        [1,0],        [1,0],        [1,0]        ),
(    [1,0],        [0,1],        [0,1],        [0,1],        [0,1],        [1,0],        [0,0],        [1,0],        [1,0],        [1,1],        [1,0],        [0,1],        [0,1],        [0,0],        [1,0],        [1,0]        ),
(    [1,0],        [0,1],        [0,1],        [0,1],        [1,0],        [0,1],        [0,1],        [0,0],        [1,0],        [0,0],        [0,1],        [0,1],        [0,1],        [0,1],        [0,0],        [1,0]        ),
(    [0,1],        [0,1],        [0,1],        [0,1],        [0,1],        [0,1],        [0,1],        [0,1],        [0,1],        [0,1],        [0,1],        [0,1],        [0,1],        [0,1],        [0,0],        [0,0]        )
])

def convert(maze,size):
    four_maze = np.zeros((size,size,4),dtype = np.int)
    for x in range(size):
        for y in range(size):
            four_maze[x][y][0]=maze[x][y][0]
            four_maze[x][y][1]=maze[x][y][1]
            four_maze[x][y][2]=maze[x][y+1][0]
            four_maze[x][y][3]=maze[x+1][y][1]  
            
    four_maze[0][0][1]=1
    four_maze[14][14][3]=-1
    return four_maze
maze = convert(typeMaze,15)


def movex(x,dirc):
    if dirc==0:
        return x-1
    elif dirc==2:
        return x+1
    else:
        return x
    
def movey(y,dirc):
    if dirc==1:
        return y-1
    elif dirc==3:
        return y+1
    else:
        return y
    
        
def dijkstra(maze,size):
    visited = np.zeros((size,size),dtype = np.int)
    dist = np.full_like(visited,100000,dtype=float)
    
    numMoves = 0
    
    dist[0][0]=0
    
    queuex = deque()
    queuey = deque()
    queuex.append(0)
    queuey.append(0)
    
    while queuey[0]!=14 or queuex[0]!=14:    
        x = queuex[0]
        y = queuey[0]      
        for i in range(4):
            if maze[y][x][i]==0:
                y1=movey(y,i)
                x1=movex(x,i)
                if visited[y1][x1]==1:
                    continue
                else:
                    dist[y1][x1]=dist[y][x]+1
                    j=1
                    while(j<len(queuex)):
                        if dist[queuey[j]][queuex[j]]>=dist[y1][x1]:
                            break
                        j=j+1
                    queuey.insert(j,y1)
                    queuex.insert(j,x1)
                    numMoves=numMoves+1
        print(queuey.popleft(),queuex.popleft())
        visited[y][x]=1
    print(queuey[0],queuex[0])    
    return numMoves
print(dijkstra(maze,15))
